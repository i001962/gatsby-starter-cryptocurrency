#!/usr/bin/env node

const { readdirSync, readFileSync, statSync } = require('fs')
const { join } = require('path')
const jsYaml = require('js-yaml')
const versionHelper = require('../src/lib/versionHelper')

// const { current, docPagesDirectory, versions } = require('../constants')

const {
  docs: { current, versions, docPagesDirectory }
} = require('../config')

let exitCode = null

versions.push(current)
versions.forEach(version => {
  const versionDirectory = versionHelper.getPrefixedVersion(version)
  const dir = `${docPagesDirectory}${versionDirectory}`
  const outlinePath = `${dir}/outline.yaml`
  const loadedOutline = jsYaml.safeLoad(readFileSync(outlinePath, 'utf8'))
  const directories = readdirSync(dir).filter(
    folder => statSync(join(dir, folder)).isDirectory() && folder[0] !== '.'
  )

  const outlineDirectories = Object.keys(loadedOutline.chapters).map(
    key => loadedOutline.chapters[key].path
  )

  const oddDirectories = {
    missingDirectories: directories.filter(folder => !outlineDirectories.includes(folder)),
    extraDirectories: outlineDirectories.filter(folder => !directories.includes(folder))
  }

  if (oddDirectories.missingDirectories.length > 0) {
    console.warn(
      '\x1b[33m',
      `[${version}] The following "path" entries are missing in ${outlinePath}, please add them with the relevant "title" and "items" keys: ${oddDirectories.missingDirectories.join(
        ', '
      )}`,
      '\x1b[37m'
    )
    exitCode = 1
  }

  if (oddDirectories.extraDirectories.length > 0) {
    console.warn(
      '\x1b[33m',
      `[${version}] The following "path" entries in ${outlinePath} do not exist in the documentation: ${oddDirectories.extraDirectories.join(
        ', '
      )}`,
      '\x1b[37m'
    )
    exitCode = 1
  }

  const fixedOutline = loadedOutline.chapters.filter(
    folder => !oddDirectories.extraDirectories.includes(folder.path)
  )

  fixedOutline
    .filter(item => statSync(`${docPagesDirectory}${versionDirectory}/${item.path}`).isDirectory())
    .forEach(directory => {
      const directoryPath = `${docPagesDirectory}${versionDirectory}/${directory.path}`
      const files = readdirSync(directoryPath).filter(file => file.endsWith('.md'))

      directory.items
        .filter(itemEntry => !files.includes(`${itemEntry}.md`))
        .forEach(itemEntry => {
          console.warn(
            '\x1b[33m',
            `[${version}] The "${itemEntry}.md" file don't exist in the ${directoryPath} folder.`,
            '\x1b[37m'
          )
          exitCode = 1
        })

      const fixedOutlineFiles = directory.items.map(file => `${file}.md`)

      files
        .filter(file => !fixedOutlineFiles.includes(file))
        .forEach(file => {
          console.warn(
            '\x1b[33m',
            `[${version}] Missing "${file}" file in "${directory.path}" section in ${outlinePath} file.`,
            '\x1b[37m'
          )
          exitCode = 1
        })
    })
})

process.on('exit', code => {
  if (code) {
    console.warn('\x1b[31m', `Failed script: exit code ${code}`, '\x1b[37m')
  }
})
process.exit(exitCode)
